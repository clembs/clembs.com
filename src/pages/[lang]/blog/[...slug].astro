---
import { render } from "astro:content";
import { getCollection } from "astro:content";
import Blog from "../../../layouts/Blog.astro";
import {
  getLocaleFromUrl,
  getPostLang,
  getPostSlug,
  localeCodes,
  useTranslations,
} from "@i18n";
import Callout from "@components/Callout.astro";

// generate all possible slugs for both langs (if either is unavailable, fallback)
export async function getStaticPaths() {
  const posts = await getCollection("blog");

  const slugs = new Set(posts.map((post) => getPostSlug(post.id)));

  return Array.from(slugs).flatMap((slug) => {
    return localeCodes.map((lang) => ({
      params: { lang, slug },
    }));
  });
}

const { slug } = Astro.params;
const lang = getLocaleFromUrl(Astro.url);

const posts = await getCollection("blog");

// we do the posts.find thing twice to avoid finding the wrong post
// and to denote if the post is localized or not
const localizedPost = posts.find(
  (post) => getPostLang(post.id) === lang && getPostSlug(post.id) === slug
);

// force it to exist since the path was created
const fallbackPost = posts.find((post) => getPostSlug(post.id) === slug)!;

const post = localizedPost || fallbackPost;
const { Content } = await render(post);

const t = useTranslations(lang);
---

<Blog {post}>
  {!localizedPost && <Callout>{t("blog.warning_unlocalized")}</Callout>}

  <Content />
</Blog>
