---
import Clembs from "@assets/icons/clembs.svg";
import Globe from "@assets/icons/globe.svg";
import { getLocaleFromUrl, useTranslations, useTranslatedPaths } from "@i18n";

const lang = getLocaleFromUrl(Astro.url);
const translatePaths = useTranslatedPaths(lang);
const t = useTranslations(lang);

const targets = [
  {
    name: t("blog"),
    href: translatePaths("/blog"),
  },
];
// {
//   name: t("about"),
//   href: translatePaths("/about"),
// },
// {
//   name: t("now"),
//   href: translatePaths("/now"),
// },
---

<script>
  // progressive enhancements via JS: click outside && escape
  const checkbox = document.getElementById(
    "language-input"
  ) as HTMLInputElement;
  const menu = document.getElementById("language-menu");

  document.addEventListener("click", (ev) => {
    if (
      !checkbox ||
      // avoid duplicate click triggers
      // (since a click on <label> triggers a click on <input>)
      (ev.target as HTMLElement).closest("#language-menu-trigger")
    )
      return;

    // if the user clicks outside the checkbox (don't interfere with default behavior)
    // and outside the menu, and the checkbox is checked, uncheck it
    if (ev.target !== checkbox && ev.target !== menu && checkbox.checked) {
      checkbox.checked = false;
    }
  });

  document.addEventListener("keydown", (ev) => {
    if (ev.key === "Escape" && checkbox.checked) {
      checkbox.checked = false;
      checkbox.focus();
    }
  });
</script>

<header transition:name="navbar">
  <a
    class="logo"
    href={translatePaths("/")}
    aria-label={t("home")}
    title={t("home")}
  >
    <Clembs />
  </a>

  <div class="right">
    <nav>
      <ul>
        {
          targets.map((t) => (
            <li>
              <a class="clickable target" href={t.href}>
                {t.name}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
    <input type="checkbox" id="language-input" />

    <div id="language-input-wrapper">
      <label
        id="language-menu-trigger"
        for="language-input"
        class="target"
        aria-label="Change website language"
        aria-controls="language-menu"
      >
        <Globe />
      </label>
      <div id="language-menu">
        <a href={translatePaths(Astro.url.pathname, "en")}> english </a>
        <a href={translatePaths(Astro.url.pathname, "fr")}> fran√ßais </a>
      </div>
    </div>
  </div>
</header>

<style lang="scss">
  header {
    display: flex;
    justify-content: space-between;
    align-items: center;

    // fix for chromium to have the language menu on top of content
    position: relative;
    z-index: 99;

    background-color: var(--color-white);
    border: 1px solid var(--color-500);
    border-radius: 999px;
    margin: 1.25rem auto;
    padding: 0.5rem 1rem 0.5rem 0.5rem;
    max-width: 800px;
    width: calc(100% - 1.5rem);
  }

  .logo {
    display: block;
    padding: 0.5rem;
    border-radius: 50%;

    &:focus-visible {
      background-color: var(--color-40);
    }

    @media (hover: hover) {
      &:hover {
        background-color: var(--color-40);
      }
    }
  }

  .right {
    display: flex;
    gap: 0.5rem;
  }

  nav {
    display: contents;

    ul {
      display: contents;
      list-style: none;
    }
  }

  .target {
    display: inline-grid;
    place-items: center;
    padding: 0.75rem 1.25rem;
    border-radius: 999px;
    user-select: none;
    cursor: pointer;

    &:focus-visible {
      background-color: var(--color-40);
    }

    @media (hover: hover) {
      &:hover {
        background-color: var(--color-40);
      }
    }
  }

  input[type="checkbox"] {
    position: fixed;
    width: 1px;
    height: 1px;
    top: -1px;
    right: -1px;

    &:focus-visible + #language-input-wrapper label {
      background-color: var(--color-40);
      box-shadow:
        0 0 0 2px var(--color-white),
        0 0 0 4px var(--color-500);
    }

    &:checked + #language-input-wrapper label {
      background-color: var(--color-40);

      & + #language-menu {
        display: flex;
        opacity: 1;
        transform: translateY(44px);
      }
    }

    @starting-style {
      &:checked + #language-input-wrapper label + #language-menu {
        opacity: 0;
        transform: translateY(calc(-1rem + 44px)) scale(0.9);
      }
    }
  }

  #language-input-wrapper {
    position: relative;
  }

  #language-menu-trigger {
    padding: 0.75rem;

    :global(svg) {
      width: 1.25rem;
      height: 1.25rem;
    }
  }

  #language-menu {
    display: none;
    flex-direction: column;
    background-color: var(--color-white);
    border: 1px solid var(--color-400);
    padding: 0.5rem;
    border-radius: 1.5rem;
    cursor: default;

    position: absolute;
    top: 0;
    right: 0;

    opacity: 0;
    transform: translateY(calc(-1rem + 44px)) scale(0.95);
    transform-origin: top right;

    transition:
      opacity,
      transform,
      overlay allow-discrete,
      display allow-discrete;
    transition-duration: 250ms;

    a {
      white-space: nowrap;
      padding: 1rem;
      border-radius: 1rem;

      @media (hover: hover) {
        &:hover,
        &:focus-visible {
          background-color: var(--color-40);
        }
      }
    }
  }
</style>
